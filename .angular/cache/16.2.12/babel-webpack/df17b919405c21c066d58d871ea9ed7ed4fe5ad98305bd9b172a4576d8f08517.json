{"ast":null,"code":"import * as symbol from './symbol.js';\nimport * as time from './time.js';\nimport * as env from './environment.js';\nimport * as func from './function.js';\nimport * as json from './json.js';\nexport const BOLD = symbol.create();\nexport const UNBOLD = symbol.create();\nexport const BLUE = symbol.create();\nexport const GREY = symbol.create();\nexport const GREEN = symbol.create();\nexport const RED = symbol.create();\nexport const PURPLE = symbol.create();\nexport const ORANGE = symbol.create();\nexport const UNCOLOR = symbol.create();\n\n/* c8 ignore start */\n/**\n * @param {Array<undefined|string|Symbol|Object|number|function():any>} args\n * @return {Array<string|object|number|undefined>}\n */\nexport const computeNoColorLoggingArgs = args => {\n  if (args.length === 1 && args[0]?.constructor === Function) {\n    args = /** @type {Array<string|Symbol|Object|number>} */ /** @type {[function]} */args[0]();\n  }\n  const strBuilder = [];\n  const logArgs = [];\n  // try with formatting until we find something unsupported\n  let i = 0;\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (arg === undefined) {\n      break;\n    } else if (arg.constructor === String || arg.constructor === Number) {\n      strBuilder.push(arg);\n    } else if (arg.constructor === Object) {\n      break;\n    }\n  }\n  if (i > 0) {\n    // create logArgs with what we have so far\n    logArgs.push(strBuilder.join(''));\n  }\n  // append the rest\n  for (; i < args.length; i++) {\n    const arg = args[i];\n    if (!(arg instanceof Symbol)) {\n      logArgs.push(arg);\n    }\n  }\n  return logArgs;\n};\n/* c8 ignore stop */\n\nconst loggingColors = [GREEN, PURPLE, ORANGE, BLUE];\nlet nextColor = 0;\nlet lastLoggingTime = time.getUnixTime();\n\n/* c8 ignore start */\n/**\n * @param {function(...any):void} _print\n * @param {string} moduleName\n * @return {function(...any):void}\n */\nexport const createModuleLogger = (_print, moduleName) => {\n  const color = loggingColors[nextColor];\n  const debugRegexVar = env.getVariable('log');\n  const doLogging = debugRegexVar !== null && (debugRegexVar === '*' || debugRegexVar === 'true' || new RegExp(debugRegexVar, 'gi').test(moduleName));\n  nextColor = (nextColor + 1) % loggingColors.length;\n  moduleName += ': ';\n  return !doLogging ? func.nop : (...args) => {\n    if (args.length === 1 && args[0]?.constructor === Function) {\n      args = args[0]();\n    }\n    const timeNow = time.getUnixTime();\n    const timeDiff = timeNow - lastLoggingTime;\n    lastLoggingTime = timeNow;\n    _print(color, moduleName, UNCOLOR, ...args.map(arg => {\n      if (arg != null && arg.constructor === Uint8Array) {\n        arg = Array.from(arg);\n      }\n      const t = typeof arg;\n      switch (t) {\n        case 'string':\n        case 'symbol':\n          return arg;\n        default:\n          {\n            return json.stringify(arg);\n          }\n      }\n    }), color, ' +' + timeDiff + 'ms');\n  };\n};\n/* c8 ignore stop */","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}