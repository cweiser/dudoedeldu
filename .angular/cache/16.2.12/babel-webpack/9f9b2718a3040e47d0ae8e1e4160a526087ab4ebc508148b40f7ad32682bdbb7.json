{"ast":null,"code":"/* eslint-env browser */\n\nimport * as encoding from 'lib0/encoding';\nimport * as decoding from 'lib0/decoding';\nimport * as promise from 'lib0/promise';\nimport * as error from 'lib0/error';\nimport * as string from 'lib0/string';\n\n/**\n * @param {string} secret\n * @param {string} roomName\n * @return {PromiseLike<CryptoKey>}\n */\nexport const deriveKey = (secret, roomName) => {\n  const secretBuffer = string.encodeUtf8(secret).buffer;\n  const salt = string.encodeUtf8(roomName).buffer;\n  return crypto.subtle.importKey('raw', secretBuffer, 'PBKDF2', false, ['deriveKey']).then(keyMaterial => crypto.subtle.deriveKey({\n    name: 'PBKDF2',\n    salt,\n    iterations: 100000,\n    hash: 'SHA-256'\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256\n  }, true, ['encrypt', 'decrypt']));\n};\n\n/**\n * @param {Uint8Array} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted, base64 encoded message\n */\nexport const encrypt = (data, key) => {\n  if (!key) {\n    return (/** @type {PromiseLike<Uint8Array>} */promise.resolve(data)\n    );\n  }\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  return crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, data).then(cipher => {\n    const encryptedDataEncoder = encoding.createEncoder();\n    encoding.writeVarString(encryptedDataEncoder, 'AES-GCM');\n    encoding.writeVarUint8Array(encryptedDataEncoder, iv);\n    encoding.writeVarUint8Array(encryptedDataEncoder, new Uint8Array(cipher));\n    return encoding.toUint8Array(encryptedDataEncoder);\n  });\n};\n\n/**\n * @param {Object} data data to be encrypted\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} encrypted data, if key is provided\n */\nexport const encryptJson = (data, key) => {\n  const dataEncoder = encoding.createEncoder();\n  encoding.writeAny(dataEncoder, data);\n  return encrypt(encoding.toUint8Array(dataEncoder), key);\n};\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Uint8Array>} decrypted buffer\n */\nexport const decrypt = (data, key) => {\n  if (!key) {\n    return (/** @type {PromiseLike<Uint8Array>} */promise.resolve(data)\n    );\n  }\n  const dataDecoder = decoding.createDecoder(data);\n  const algorithm = decoding.readVarString(dataDecoder);\n  if (algorithm !== 'AES-GCM') {\n    promise.reject(error.create('Unknown encryption algorithm'));\n  }\n  const iv = decoding.readVarUint8Array(dataDecoder);\n  const cipher = decoding.readVarUint8Array(dataDecoder);\n  return crypto.subtle.decrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, cipher).then(data => new Uint8Array(data));\n};\n\n/**\n * @param {Uint8Array} data\n * @param {CryptoKey?} key\n * @return {PromiseLike<Object>} decrypted object\n */\nexport const decryptJson = (data, key) => decrypt(data, key).then(decryptedValue => decoding.readAny(decoding.createDecoder(new Uint8Array(decryptedValue))));","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}