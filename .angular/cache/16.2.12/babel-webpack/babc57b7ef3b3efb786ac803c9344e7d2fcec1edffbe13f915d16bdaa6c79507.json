{"ast":null,"code":"/* eslint-env browser */\n\n/**\n * Helpers for cross-tab communication using broadcastchannel with LocalStorage fallback.\n *\n * ```js\n * // In browser window A:\n * broadcastchannel.subscribe('my events', data => console.log(data))\n * broadcastchannel.publish('my events', 'Hello world!') // => A: 'Hello world!' fires synchronously in same tab\n *\n * // In browser window B:\n * broadcastchannel.publish('my events', 'hello from tab B') // => A: 'hello from tab B'\n * ```\n *\n * @module broadcastchannel\n */\n\n// @todo before next major: use Uint8Array instead as buffer object\n\nimport * as map from './map.js';\nimport * as set from './set.js';\nimport * as buffer from './buffer.js';\nimport * as storage from './storage.js';\n\n/**\n * @typedef {Object} Channel\n * @property {Set<function(any, any):any>} Channel.subs\n * @property {any} Channel.bc\n */\n\n/**\n * @type {Map<string, Channel>}\n */\nconst channels = new Map();\n\n/* c8 ignore start */\nclass LocalStoragePolyfill {\n  /**\n   * @param {string} room\n   */\n  constructor(room) {\n    this.room = room;\n    /**\n     * @type {null|function({data:ArrayBuffer}):void}\n     */\n    this.onmessage = null;\n    /**\n     * @param {any} e\n     */\n    this._onChange = e => e.key === room && this.onmessage !== null && this.onmessage({\n      data: buffer.fromBase64(e.newValue || '')\n    });\n    storage.onChange(this._onChange);\n  }\n\n  /**\n   * @param {ArrayBuffer} buf\n   */\n  postMessage(buf) {\n    storage.varStorage.setItem(this.room, buffer.toBase64(buffer.createUint8ArrayFromArrayBuffer(buf)));\n  }\n  close() {\n    storage.offChange(this._onChange);\n  }\n}\n/* c8 ignore stop */\n\n// Use BroadcastChannel or Polyfill\n/* c8 ignore next */\nconst BC = typeof BroadcastChannel === 'undefined' ? LocalStoragePolyfill : BroadcastChannel;\n\n/**\n * @param {string} room\n * @return {Channel}\n */\nconst getChannel = room => map.setIfUndefined(channels, room, () => {\n  const subs = set.create();\n  const bc = new BC(room);\n  /**\n   * @param {{data:ArrayBuffer}} e\n   */\n  /* c8 ignore next */\n  bc.onmessage = e => subs.forEach(sub => sub(e.data, 'broadcastchannel'));\n  return {\n    bc,\n    subs\n  };\n});\n\n/**\n * Subscribe to global `publish` events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const subscribe = (room, f) => {\n  getChannel(room).subs.add(f);\n  return f;\n};\n\n/**\n * Unsubscribe from `publish` global events.\n *\n * @function\n * @param {string} room\n * @param {function(any, any):any} f\n */\nexport const unsubscribe = (room, f) => {\n  const channel = getChannel(room);\n  const unsubscribed = channel.subs.delete(f);\n  if (unsubscribed && channel.subs.size === 0) {\n    channel.bc.close();\n    channels.delete(room);\n  }\n  return unsubscribed;\n};\n\n/**\n * Publish data to all subscribers (including subscribers on this tab)\n *\n * @function\n * @param {string} room\n * @param {any} data\n * @param {any} [origin]\n */\nexport const publish = (room, data, origin = null) => {\n  const c = getChannel(room);\n  c.bc.postMessage(data);\n  c.subs.forEach(sub => sub(data, origin));\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}