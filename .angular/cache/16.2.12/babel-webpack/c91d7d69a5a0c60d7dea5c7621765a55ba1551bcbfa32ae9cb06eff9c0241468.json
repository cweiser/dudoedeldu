{"ast":null,"code":"/**\n * Isomorphic module to work access the environment (query params, env variables).\n *\n * @module environment\n */\n\nimport * as map from './map.js';\nimport * as string from './string.js';\nimport * as conditions from './conditions.js';\nimport * as storage from './storage.js';\nimport * as f from './function.js';\n\n/* c8 ignore next 2 */\n// @ts-ignore\nexport const isNode = typeof process !== 'undefined' && process.release && /node|io\\.js/.test(process.release.name) && Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';\n\n/* c8 ignore next */\nexport const isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && !isNode;\n/* c8 ignore next 3 */\nexport const isMac = typeof navigator !== 'undefined' ? /Mac/.test(navigator.platform) : false;\n\n/**\n * @type {Map<string,string>}\n */\nlet params;\nconst args = [];\n\n/* c8 ignore start */\nconst computeParams = () => {\n  if (params === undefined) {\n    if (isNode) {\n      params = map.create();\n      const pargs = process.argv;\n      let currParamName = null;\n      for (let i = 0; i < pargs.length; i++) {\n        const parg = pargs[i];\n        if (parg[0] === '-') {\n          if (currParamName !== null) {\n            params.set(currParamName, '');\n          }\n          currParamName = parg;\n        } else {\n          if (currParamName !== null) {\n            params.set(currParamName, parg);\n            currParamName = null;\n          } else {\n            args.push(parg);\n          }\n        }\n      }\n      if (currParamName !== null) {\n        params.set(currParamName, '');\n      }\n      // in ReactNative for example this would not be true (unless connected to the Remote Debugger)\n    } else if (typeof location === 'object') {\n      params = map.create(); // eslint-disable-next-line no-undef\n      (location.search || '?').slice(1).split('&').forEach(kv => {\n        if (kv.length !== 0) {\n          const [key, value] = kv.split('=');\n          params.set(`--${string.fromCamelCase(key, '-')}`, value);\n          params.set(`-${string.fromCamelCase(key, '-')}`, value);\n        }\n      });\n    } else {\n      params = map.create();\n    }\n  }\n  return params;\n};\n/* c8 ignore stop */\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next */\nexport const hasParam = name => computeParams().has(name);\n\n/**\n * @param {string} name\n * @param {string} defaultVal\n * @return {string}\n */\n/* c8 ignore next 2 */\nexport const getParam = (name, defaultVal) => computeParams().get(name) || defaultVal;\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 4 */\nexport const getVariable = name => isNode ? conditions.undefinedToNull(process.env[name.toUpperCase().replaceAll('-', '_')]) : conditions.undefinedToNull(storage.varStorage.getItem(name));\n\n/**\n * @param {string} name\n * @return {string|null}\n */\n/* c8 ignore next 2 */\nexport const getConf = name => computeParams().get('--' + name) || getVariable(name);\n\n/**\n * @param {string} name\n * @return {string}\n */\n/* c8 ignore next 5 */\nexport const ensureConf = name => {\n  const c = getConf(name);\n  if (c == null) throw new Error(`Expected configuration \"${name.toUpperCase().replaceAll('-', '_')}\"`);\n  return c;\n};\n\n/**\n * @param {string} name\n * @return {boolean}\n */\n/* c8 ignore next 2 */\nexport const hasConf = name => hasParam('--' + name) || getVariable(name) !== null;\n\n/* c8 ignore next */\nexport const production = hasConf('production');\n\n/* c8 ignore next 2 */\nconst forceColor = isNode && f.isOneOf(process.env.FORCE_COLOR, ['true', '1', '2']);\n\n/* c8 ignore start */\n/**\n * Color is enabled by default if the terminal supports it.\n *\n * Explicitly enable color using `--color` parameter\n * Disable color using `--no-color` parameter or using `NO_COLOR=1` environment variable.\n * `FORCE_COLOR=1` enables color and takes precedence over all.\n */\nexport const supportsColor = forceColor || !hasParam('--no-colors') &&\n// @todo deprecate --no-colors\n!hasConf('no-color') && (!isNode || process.stdout.isTTY) && (!isNode || hasParam('--color') || getVariable('COLORTERM') !== null || (getVariable('TERM') || '').includes('color'));\n/* c8 ignore stop */","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}